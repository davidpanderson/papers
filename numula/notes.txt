nuance inference

we want
    to capture the long gestures: cresc, accel
        Note: use 'gesture' more
    to separate these continuous gestures from momentary ones

two cases:
- create nuance for a particular performance of a work
    mostly a manual process
    data-fitting tool: picks PFT primitive types and parameters
    interface for viewing the deltas
- create nuance for a collection of performances of a work,
    with a common nuance structure so you can compare them
    Pick one of the performances
    generate nuance desc for that one; create structure S (manual)
    for each of the others:
        create nuance desc using S (automatic)
    look at the errors;
        if one of them sticks out
        (e.g. they put in a rit where no one else did)
        adjust the structure accordingly, and re-run

terms:

'tagged score'
    a score with tags, e.g. rh/lh, melody etc.

'nuance structure'
    a list of transformations
        function
        selector
        PFT not specified
    e.g. 2 continuous tempo transformations
        1 discrete pause layer
        1 discrete shift layer
        2 continuous volume transformations
        1 volume transform for tag 'rh'
        1 accent transform

'constrained nuance structure'
    ... some constraints on each transformation,
        e.g. max number or min length of primitives.
        Or maybe the durations of PFT primitives are fixed,
            but not curve type or parameters
        Does everyone do a ritardando over measures 1-8?

'nuance specification'
    list of transformations with the PFTs given

'Complexity' C(S) of a nuance spec S
    this can be defined in various ways:
        number of PFT primitives
        or Kolmogorov: min length of program that generates S

'Score rendition'
    a score, and a list of notes with start/dur/volume, and pedals
    with a (partial) one-to-one mapping from rendition notes to score notes
    
error E(spec, rendition)
    RMS (or max) of
        time diff
        vol diff

'nuance inference'
    idea:
        given a performance, how simply can we describe its nuance?
        a nuance structure has a "complexity" C and an "error" E.
        For given C, how low can be make E?
        For a given E, how simple a structure can we make?
    given a
        nuance structure
        performance
        score w/ tags
        set of PFT primitives
    ... find the transformations that most closely approximate the perf

    what about tags and note selectors?
        are these pre-assigned?
        yes, exponential complexity otherwise

    Nuance inference is probably an iterative process
        create a nuance structure
        loop
            automated data fitting
            look at result, tweak nuance structure

    purposes of inference
        evaluate continuous primitives
        characterize/compare
            performers
            periods
            nationalities
            schools e.g. Juliard
------------------
volume PFTs:
a linear segment is linear in score time -
not performance time, if there are tempo transformations.
Same for exp and other functions.

It would be possible to make the volume change linear in perf time.
- Find the start and end perf times of the volume primitive.
    (insert marker events if needed)
- Go through notes in the range of score times
    and adjust volume based on PFT value at their perf time.
-----------------
Big picture:
There are two levels to MNS:

- Nuance description
    a sequence of transformations, each of which is generally
        - operation
        - a PFT
        - a note selector
    These are static; values are hardwired
    Analogous to a CSS file

- Nuance scripting
    Scriptable (Python or other) system that generates a nuance description.
    This lets you have
    - parameterization: e.g. you can have variables that appear
        throughout the PFTs.
        e.g. variables that control the relative volume of melody
        and accompaniment,
        or the extent of tempo changes and rubato
    - looping and functions
        e.g. repeat this dynamic pattern 4 times
    Analogous to SASS: https://en.wikipedia.org/wiki/Sass_(style_sheet_language)

For long/complex pieces you need nuance scripting;
otherwise you'll get bored and stop

A nuance script can be a program.
E.g. Numula is a nuance generator implemented as a Python API.
One can also imagine a nuance generator that's more graphical
and less code-like,
e.g. you can create a volume contour by drag and drop,
have its parameters controlled by a slider,
and be able to replicate it.
----------------
$mns is not intended to model musical cognition or compositional structure.
------------------
We have a mechanism for defining measures,
and referring to notes' offset within measures.

What about other structural units?
What if we wanted to tag 4/8/16-bar units,
and their components (like the trailing ritard)?
----------------
size of gestures
    large: accelerando over 32 measures
    small: short (10s of milliseconds) pauses at the beat or measure level
----------------
interfaces

textual

graphical

demonstrative
    play part of the piece
    best for large nuance gestures

motile
    conduct the piece
    custom input device (baton?)
    mouse, touch screen
    best for large nuance gestures
----------------
about examples:

nuance at different time scales (beat/measure/phrase)
volume and pedaling: separate hands/voices
importance of pauses in the 20 to 50 millisecond range
repeated patterns

examples

line and note counts for score/nuance?

piece               score   nuance  #notes
helps/faure         126     163     1147
helps/rach          94      99      1470
helps/ravel         116     87      1389
chopin              148     161     1558
berio               83      101     394
beethoven           319     481     7012
---------------------

The MNM model

Configuration: a collection of notes (and possibly measures, pedals usage)

Two forms of time info
Notes had start/dur in both score and adj time
measures have start/dur in score time

Initial configuration C0: typically the info in a score.
Could come from a score editor, MusicXML file, MIDI file, Music21.
no nuance: adj note times are as notated in the score, volumes are default
(or C0 could also incorporate info from a performance,
in situations where we want to add nuance to a performance)

MNM Nuance descriptions have two stages
1) adding tags and attributes; allow specification of note subsets
2) applying a sequence of "transformation",
    which modifies time or volume.
    They may also add pedal usages.
    produces a sequence of configurations.
See figure 1

2.1 Attributes and tags
------------------------

7. Nuance description files and scripting

MNM provides a basis for nuance descriptions.
Ideally, musicians should be able to share these by email,
upload them to archival sites,
manage versions on Github, and so on.
be exported and imported
Software systems supporting MNM should be able to
export and import standardized nuance descriptions.
For these purposes we need <i>nuance description files</i> (NDFs),
There is a range of possibilities for the content and format of these files.

In the case of Numula, an NDF is a Python program
that builds PDFs and performs transformations.
This has the advantage of being 'scriptable': it can express
rep
param
funcs

In our experience, scripting capabilities are needed to
describe complex nuance for long works.
However, describing nuance by a program limits the editing options;
for example, it's not clear how to integrate with
a graphical score editor.

At the other end of the spectrum,
an NDF could be a static (non-scriptable) data structure, encoded in JSON.
This would include two parts:
a) tagging information:
for each note (identified perhaps by score time and pitch),
a list of tags and attributes;
b) a list of transformations,
each with a PFT and note selector
(in Python syntax, but limited to boolean expressions).

This format would suffice for many purposes;
it could be displayed in a graphical score editor.
However, because it lacks scriptability, it's not amenable to editing.
It might be possible to add limited scripting features;
this is an area of future work.
